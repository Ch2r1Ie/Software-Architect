<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 750">
  <style>
    .title { font: bold 24px sans-serif; }
    .subtitle { font: bold 18px sans-serif; }
    .text { font: 14px sans-serif; }
    .code { font: 12px monospace; fill: #333; }
    .box { fill: #f0f0f0; stroke: #333; stroke-width: 2; }
    .highlight { fill: #e6f3ff; }
    .violation { fill: #ffe6e6; }
    .arrow { stroke: #333; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
  </style>
  
  <!-- Title -->
  <text x="400" y="30" text-anchor="middle" class="title">DRY (Don't Repeat Yourself) Principle</text>
  
  <!-- Definition -->
  <rect x="50" y="50" width="700" height="40" class="box"/>
  <text x="400" y="75" text-anchor="middle" class="text">
    "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system."
  </text>
  
  <!-- Key Concepts -->
  <text x="50" y="120" class="subtitle">Key Concepts:</text>
  
  <rect x="50" y="130" width="700" height="100" class="box highlight"/>
  <text x="60" y="150" class="text">• Avoid duplicating code, data, or business logic</text>
  <text x="60" y="170" class="text">• Extract common functionality into reusable methods or classes</text>
  <text x="60" y="190" class="text">• Use abstraction to represent shared concepts</text>
  <text x="60" y="210" class="text">• Maintain a single source of truth for each piece of information</text>
  
  <!-- Example -->
  <text x="50" y="260" class="subtitle">Example: Concert Ticket System</text>
  
  <!-- Violating DRY -->
  <rect x="50" y="280" width="300" height="310" class="box violation"/>
  <text x="200" y="300" text-anchor="middle" class="subtitle">Violating DRY</text>
  <text x="60" y="320" class="code">class StandardTicket {</text>
  <text x="70" y="340" class="code">  public decimal CalculatePrice() {</text>
  <text x="80" y="360" class="code">    decimal basePrice = 100;</text>
  <text x="80" y="380" class="code">    decimal tax = basePrice * 0.1m;</text>
  <text x="80" y="400" class="code">    return basePrice + tax;</text>
  <text x="70" y="420" class="code">  }</text>
  <text x="60" y="440" class="code">}</text>
  <text x="60" y="460" class="code">class VIPTicket {</text>
  <text x="70" y="480" class="code">  public decimal CalculatePrice() {</text>
  <text x="80" y="500" class="code">    decimal basePrice = 200;</text>
  <text x="80" y="520" class="code">    decimal tax = basePrice * 0.1m;</text>
  <text x="80" y="540" class="code">    return basePrice + tax;</text>
  <text x="70" y="560" class="code">  }</text>
  <text x="60" y="580" class="code">}</text>
  
  <!-- Following DRY -->
  <rect x="450" y="280" width="350" height="330" class="box highlight"/>
  <text x="600" y="300" text-anchor="middle" class="subtitle">Following DRY</text>
  <text x="460" y="320" class="code">abstract class Ticket {</text>
  <text x="470" y="340" class="code">  protected abstract decimal BasePrice { get; }</text>
  <text x="470" y="360" class="code">  private const decimal TaxRate = 0.1m;</text>
  <text x="470" y="380" class="code">  </text>
  <text x="470" y="400" class="code">  public decimal CalculatePrice() {</text>
  <text x="480" y="420" class="code">    decimal tax = BasePrice * TaxRate;</text>
  <text x="480" y="440" class="code">    return BasePrice + tax;</text>
  <text x="470" y="460" class="code">  }</text>
  <text x="460" y="480" class="code">}</text>
  <text x="460" y="500" class="code">class StandardTicket : Ticket {</text>
  <text x="470" y="520" class="code">  protected override decimal BasePrice => 100;</text>
  <text x="460" y="540" class="code">}</text>
  <text x="460" y="560" class="code">class VIPTicket : Ticket {</text>
  <text x="470" y="580" class="code">  protected override decimal BasePrice => 200;</text>
  <text x="460" y="600" class="code">}</text>
  
  <!-- Arrow -->
  <path d="M350 400 L450 400" class="arrow"/>
  
  <!-- Benefits -->
  <text x="50" y="610" class="subtitle">Benefits of DRY:</text>
  <text x="60" y="630" class="text">• Improved maintainability</text>
  <text x="60" y="650" class="text">• Reduced risk of inconsistencies</text>
  <text x="300" y="630" class="text">• Easier to update and extend</text>
  <text x="300" y="650" class="text">• Promotes code reuse</text>
  <text x="540" y="630" class="text">• Reduces cognitive load</text>
  <text x="540" y="650" class="text">• Easier to test and debug</text>
  
  <!-- Arrowhead marker -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" />
    </marker>
  </defs>
</svg>