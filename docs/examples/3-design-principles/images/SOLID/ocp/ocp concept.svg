<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 900 700">
  <style>
    .title { font: bold 24px sans-serif; }
    .subtitle { font: bold 18px sans-serif; }
    .text { font: 14px sans-serif; }
    .code { font: 12px monospace; fill: #333; }
    .box { fill: #f0f0f0; stroke: #333; stroke-width: 2; }
    .highlight { fill: #e6f3ff; }
    .arrow { stroke: #333; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
  </style>
  
  <!-- Title -->
  <text x="400" y="30" text-anchor="middle" class="title">Open/Closed Principle (OCP)</text>
  
  <!-- Definition -->
  <rect x="50" y="50" width="700" height="40" class="box"/>
  <text x="400" y="75" text-anchor="middle" class="text">
    "Software entities should be open for extension, but closed for modification."
  </text>
  
  <!-- Key Concepts -->
  <text x="50" y="120" class="subtitle">Key Concepts:</text>
  
  <rect x="50" y="130" width="700" height="100" class="box highlight"/>
  <text x="60" y="150" class="text">• Open for extension: New behavior can be added without modifying existing code</text>
  <text x="60" y="170" class="text">• Closed for modification: Existing behavior should not be altered when extending</text>
  <text x="60" y="190" class="text">• Use abstractions and polymorphism to achieve flexibility</text>
  <text x="60" y="210" class="text">• Separate extensible behavior behind an interface and flip dependencies</text>
  
  <!-- Example -->
  <text x="50" y="260" class="subtitle">Example: Concert Ticket System</text>
  
  <!-- Violating OCP -->
  <rect x="50" y="280" width="320" height="210" class="box"/>
  <text x="200" y="300" text-anchor="middle" class="subtitle">Violating OCP</text>
  <text x="60" y="320" class="code">class TicketPriceCalculator {</text>
  <text x="70" y="340" class="code">  decimal CalculatePrice(Ticket ticket) {</text>
  <text x="80" y="360" class="code">    if (ticket.Type == "Regular")</text>
  <text x="90" y="380" class="code">      return ticket.BasePrice;</text>
  <text x="80" y="400" class="code">    else if (ticket.Type == "VIP")</text>
  <text x="90" y="420" class="code">      return ticket.BasePrice * 1.5m;</text>
  <text x="80" y="440" class="code">    // Need to modify for new ticket types</text>
  <text x="70" y="460" class="code">  }</text>
  <text x="60" y="480" class="code">}</text>
  
  <!-- Following OCP -->
  <rect x="450" y="280" width="340" height="310" class="box highlight"/>
  <text x="600" y="300" text-anchor="middle" class="subtitle">Following OCP</text>
  <text x="460" y="320" class="code">abstract class Ticket {</text>
  <text x="470" y="340" class="code">  public decimal BasePrice { get; set; }</text>
  <text x="470" y="360" class="code">  public abstract decimal CalculatePrice();</text>
  <text x="460" y="380" class="code">}</text>
  <text x="460" y="400" class="code">class RegularTicket : Ticket {</text>
  <text x="470" y="420" class="code">  public override decimal CalculatePrice() {</text>
  <text x="480" y="440" class="code">    return BasePrice;</text>
  <text x="470" y="460" class="code">  }</text>
  <text x="460" y="480" class="code">}</text>
  <text x="460" y="500" class="code">class VIPTicket : Ticket {</text>
  <text x="470" y="520" class="code">  public override decimal CalculatePrice() {</text>
  <text x="480" y="540" class="code">    return BasePrice * 1.5m;</text>
  <text x="470" y="560" class="code">  }</text>
  <text x="460" y="580" class="code">}</text>
  
  <!-- Arrow -->
  <path d="M350 380 L450 380" class="arrow"/>
  
  <!-- Benefits -->
  <text x="50" y="590" class="subtitle">Benefits of OCP:</text>
  <text x="60" y="610" class="text">• Easier to add new functionality without changing existing code</text>
  <text x="60" y="630" class="text">• Reduces risk of breaking existing functionality</text>
  <text x="470" y="630" class="text">• Promotes loose coupling and high cohesion</text>
  <text x="470" y="610" class="text">• Enhances code reusability and maintainability</text>
  
  <!-- Arrowhead marker -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" />
    </marker>
  </defs>
</svg>