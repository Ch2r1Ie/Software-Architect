<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 600">
  <style>
    .title { font: bold 24px sans-serif; }
    .step-title { font: bold 18px sans-serif; }
    .description { font: 14px sans-serif; }
    .code { font: 12px monospace; fill: #333; }
    .arrow { stroke: #333; stroke-width: 2; }
  </style>
  
  <!-- Title -->
  <text x="400" y="30" text-anchor="middle" class="title">Implementing the Open-Closed Principle</text>
  
  <!-- Step 1: Identify the part that changes -->
  <rect x="50" y="60" width="200" height="100" fill="#f0f0f0" stroke="#333"/>
  <text x="150" y="80" text-anchor="middle" class="step-title">Step 1</text>
  <text x="150" y="100" text-anchor="middle" class="description">Identify the part</text>
  <text x="150" y="120" text-anchor="middle" class="description">that changes</text>
  <text x="60" y="140" class="code">class AreaCalculator { ... }</text>
  
  <!-- Step 2: Create an abstraction -->
  <rect x="300" y="60" width="200" height="100" fill="#e0e0ff" stroke="#333"/>
  <text x="400" y="80" text-anchor="middle" class="step-title">Step 2</text>
  <text x="400" y="100" text-anchor="middle" class="description">Create an abstraction</text>
  <text x="310" y="140" class="code">abstract class Shape { ... }</text>
  
  <!-- Step 3: Implement concrete classes -->
  <rect x="550" y="60" width="200" height="100" fill="#e0ffe0" stroke="#333"/>
  <text x="650" y="80" text-anchor="middle" class="step-title">Step 3</text>
  <text x="650" y="100" text-anchor="middle" class="description">Implement concrete</text>
  <text x="650" y="120" text-anchor="middle" class="description">classes</text>
  <text x="560" y="140" class="code">class Rectangle : Shape { ... }</text>
  
  <!-- Step 4: Use abstraction in client code -->
  <rect x="300" y="200" width="200" height="100" fill="#ffe0e0" stroke="#333"/>
  <text x="400" y="220" text-anchor="middle" class="step-title">Step 4</text>
  <text x="400" y="240" text-anchor="middle" class="description">Use abstraction in</text>
  <text x="400" y="260" text-anchor="middle" class="description">client code</text>
  <text x="310" y="280" class="code">CalculateArea(Shape[] shapes)</text>
  
  <!-- Arrows -->
  <line x1="250" y1="110" x2="300" y2="110" class="arrow" marker-end="url(#arrowhead)"/>
  <line x1="500" y1="110" x2="550" y2="110" class="arrow" marker-end="url(#arrowhead)"/>
  <line x1="400" y1="160" x2="400" y2="200" class="arrow" marker-end="url(#arrowhead)"/>
  
  <!-- Arrowhead marker -->
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="0" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" />
    </marker>
  </defs>
  
  <!-- Result -->
  <rect x="50" y="340" width="700" height="220" fill="#f9f9f9" stroke="#333"/>
  <text x="400" y="370" text-anchor="middle" class="step-title">Result: Open for Extension, Closed for Modification</text>
  <text x="70" y="400" class="description">• New shapes can be added without changing existing code</text>
  <text x="70" y="430" class="description">• AreaCalculator remains unchanged when new shapes are introduced</text>
  <text x="70" y="460" class="description">• Improved maintainability and flexibility of the codebase</text>
  <text x="70" y="490" class="code">class Triangle : Shape { ... }  // Easy to add new shapes</text>
  <text x="70" y="520" class="code">var area = calculator.CalculateArea(new Shape[] { new Rectangle(), new Circle(), new Triangle() });</text>
</svg>
